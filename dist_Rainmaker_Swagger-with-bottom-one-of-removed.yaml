openapi: 3.0.0
info:
  description: This Swagger file provides the details about the RainMaker platform APIs.<br><br>
    There are two types of APIs supported by RainMaker - Unauthenticated and Authenticated.<br>
    The authenticated APIs are marked in the Swagger file, with a “lock” sign in front of them.<br>
    For the Unauthenticated APIs, there is no need to provide any authentication tokens in the HTTP header.<br>
    When the user logs in successfully, he receives access_token in the response. For the Authenticated APIs, this access_token needs to be passed in the "Authorization" HTTP header as the authentication token.<br>
      <br> <b>Note:</b><br><ul><li>RainMaker APIs do not support using double slashes after the resources or methods. Including a double slash goes against HTTP best practices.
    <br><li>The RainMaker APIs do not support following HTTP headers - data, verify and cookies.</ul>
  version: 1.0.0-49fdae4_2021-03-02T08:20
  title: API Definitions for RainMaker Backend Service
  termsOfService: https://urldefense.com/v3/__http://swagger.io/terms/__;!!Hd5UnLY!mOa_3ZUZ41TndmuNUiO9nEEkgmmSpxvjdNE5ejTfIHGU-0owpw0pTiQ6Tzj7F1d3$ 
  contact:
    email: esp-rainmaker-admin@espressif.com
  license:
    name: Apache 2.0
    url: https://urldefense.com/v3/__http://www.apache.org/licenses/LICENSE-2.0.html__;!!Hd5UnLY!mOa_3ZUZ41TndmuNUiO9nEEkgmmSpxvjdNE5ejTfIHGU-0owpw0pTiQ6T-4dYQin$ 
tags:
  - name: User
    description: User Creation, Login, Authentication  and Password management
  - name: User Node Association
    description: Associating a node with the user
  - name: Node Parameter Operations
    description: Update the state of the node or get the state of the node
  - name: OTA Service
    description: APIs to upload Firmware images and manage OTA jobs
  - name: Statistical Service
    description: Rainmaker Statistical Service APIs
  - name: IOT Endpoint
    description: API to fetch IOT Endpoint
  - name: Device grouping
    description: APIs for operations on device groups
paths:
  /{version}/user:
    post:
      tags:
        - User
      summary: Creates the new user or confirms the user
      description: "This API creates a new user or confirms the user. If the password is specified in the request body, a new user is created and a verification code is sent to user's mail address. If the verification code is sent in the request body, the user is confirmed."
      operationId: usercreation
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              Create User:
                value:
                  user_name: 'username@domain.com'
                  password: 'password'
              Confirm User:
                value:
                  user_name: 'username@domain.com'
                  verification_code: 'verification_code'
        description: Request body for creating new user or confirming the user
        required: true
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100008- Error in fetching tenant context details
            <br>101001- User name is missing
            <br>101002- Email-id is not in correct format
            <br>101003- Password or verification code is missing
            <br>101004- Password must be atleast 8 characters long. It should contain atleast one uppercase, one lowercase character and a number
            <br>101005- Sending verification code failed
            <br>101006- User account already exist
            <br>101007- User name or password is not as per specified policy
            <br>101008- Creating user failed
            <br>101009- Incorrect user name or password
            <br>101011- User name already verified
            <br>101012- Verification code is incorrect
            <br>101013- User confirmation failed
            <br>101019- Attempt limit exceeded, please try after some time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
    put:
      tags:
        - User
      summary: Updates Name of the user
      description: "This API Sets or updates the name of the user."
      operationId: usernameupdate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNameRequest'
            examples:
              Update User Name:
                value:
                  name: 'new name'
        description: Request body for updating name of the user
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100006- Invalid request body
            <br>101001- User name is missing
            <br>101025- User does not exist
            <br>101028- Error occurred while updating user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
          - AccessToken: []

    get:
      tags:
        - User
      summary: Fetches the details of current user
      description: "This API fetches user_id, user_name, super_admin flag, URL of profile picture and name of current user.
                    <br><br>The <b>super_admin</b> flag is returned only when the user is a super admin, in other cases, it will not be returned in the output.
                    <br>Also the <b>picture_url</b> and <b>name</b> are not returned in the output, if it is not set by the user."
      operationId: getUser
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
              examples:
                Super Admin User:
                  value:
                    user_id: string
                    user_name: string
                    super_admin: true
                    picture_url: string
                    name: string
                Other Users:
                  value:
                    user_id: string
                    user_name: string
                    picture_url: string
                    name: string
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100008- Error in fetching tenant context details
            <br>101001- Error in fetching user details
            <br>101009- Incorrect user name or password
            <br>101025- User does not exist
            <br>101026- Getting user-id from user name failed
            <br>101027- Error occurred while fetching user profile picture and name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/login:
    post:
      tags:
        - User
      summary: Handle login or extend session request from the user
      description: "This API will be used by the users to Login to RainMaker or to extend an existing session"
      operationId: login
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
            examples:
              User Login:
                value:
                  user_name: 'username@domain.com'
                  password: 'password'
              Extend Session:
                value:
                  user_name: 'username@domain.com'
                  refreshtoken: 'refreshtoken'
        description: username and password for Login
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
              examples:
                User Login:
                  value:
                    status: 'success'
                    description: 'Login successful'
                    idtoken: 'idtoken'
                    accesstoken: 'accesstoken'
                    refreshtoken: 'refreshtoken'
                Extend Session:
                  value:
                    status: 'success'
                    description: 'Login successful'
                    idtoken: 'idtoken'
                    accesstoken: 'accesstoken'
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100008- Error in fetching tenant context details
            <br>101009- Incorrect user name or password
            <br>101015- Email address is not verified
            <br>101016- Login failed
            <br>101017- Refresh token failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"

  /{version}/logout:
    post:
      tags:
        - User
      summary: Log out user from the session
      description: "This API will be used by the users to Logout from Rainmaker session"
      operationId: logout
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: logout_all
          in: query
          description: "Using this flag the user can be logged out from all sessions or only current session. The possible values are true and false."
          required: false
          schema:
            type: string
            default: 'false'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>100008- Error in fetching tenant context details
            <br>101036- Error, Invalid logout_all value specified. [Valid values are true/false]
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"

  /{version}/password:
    put:
      tags:
        - User
      summary: Handle password change request from the user
      description: ""
      operationId: password
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
            example:
              password: 'password'
              newpassword: 'newpassowrd'
        description: Password change request parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100008- Error in fetching tenant context details
            <br>100007- Either User Id or User Email needs to be provided
            <br>101009- Incorrect user name or password
            <br>101018- New Password is missing
            <br>101019- Attempt limit exceeded, please try after some time
            <br>101020- Change password failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/forgotpassword:
    put:
      tags:
        - User
      summary: Handle forgot password request from the user
      description: ""
      operationId: forgotpassword
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            examples:
              Request Forgot Password:
                value:
                  user_name: 'username@domain.com'
              Confirm Forgot Password:
                value:
                  user_name: 'username@domain.com'
                  password: 'password'
                  verification_code: 'verification_code'

        description: password change request parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100008- Error in fetching tenant context details
            <br>101001- User name is missing
            <br>101019- Attempt limit exceeded, please try after some time
            <br>101030- Verification code is missing
            <br>101031- Forgot password request failed
            <br>101032- Password is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAPIFailureResponse"
  /{version}/user/nodes:
    get:
      tags:
        - User Node Association
      summary: Get the nodes associated with the user
      description: ""
      operationId: getUserNodes
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node Id of node to get the node details
          required: false
          schema:
            type: string
        - name: node_details
          in: query
          description: optional flag **(true/false)**, to indicate if the node details are required in the response
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: optional flag **(true/false)**, to indicate if the node details should contain status in the response or not. Default = true
          required: false
          schema:
            type: string
        - name: config
          in: query
          description: optional flag **(true/false)**, to indicate if the node details should contain config in the response or not. Default = true
          required: false
          schema:
            type: string
        - name: params
          in: query
          description: optional flag **(true/false)**, to indicate if the node details should contain params in the response or not. Default = true
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: use next_id from the response as start_id to fetch the next set of records
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: number of nodes to fetch
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNodesList"
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>100008- Error in fetching tenant context details
            <br>100010- Node does not belong to user
            <br>100012- Invalid Request
            <br>103007- Fetching node to User mapping failed
            <br>103014- Error in checking if node belongs to user
            <br>103015- Error in getting total node count for user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/config:
    get:
      tags:
        - User Node Association
      summary: Get the configuration for the node
      description: ""
      operationId: getUserNodeConfiguration
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeConfiguration"
        "400":
          description: failure<br>Error Codes And Error Description
            <br>100002- API Version is not supported
            <br>100007- Either User Id or User Email needs to be provided
            <br>100008- Error in fetching tenant context details
            <br>100009- Node Id is missing
            <br>100010- Node does not belong to user
            <br>100011- Invalid JSON received
            <br>103001- Fetching nodes failed
            <br>103002- Node config not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/mapping:
    put:
      tags:
        - User Node Association
      summary: Add or Remove the User Node mapping
      description: ""
      operationId: addRemoveUserNodeMapping
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRemoveUserNodeMappingRequest'
            examples:
              Add User Node Mapping:
                value:
                  node_id: 'node_id'
                  secret_key: 'secret_key'
                  operation: 'add'
              Remove User Node Mapping:
                value:
                  node_id: 'node_id'
                  operation: 'remove'
        description: Add or Remove User Node Mapping Request Parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddUserNodeMappingResponse'
              examples:
                Add User Node Mapping:
                  value:
                    status: 'success'
                    description: 'Success description'
                    request_id: 'request_id'
                Remove User Node Mapping:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100002- API Version is not supported
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>100008- Error in fetching tenant context details
            <br>100009- Node Id is missing
            <br>100010- Node does not belong to user
            <br>103003- Invalid operation specified.[Valid operation values are add/remove]
            <br>103004- Secret key for mapping user to node mapping is blank
            <br>103005- NodeId is too long
            <br>103006- Secret key is too long
            <br>103007- Fetching node to User mapping failed
            <br>103008- Adding user to nodes mapping failed
            <br>103009- Error occurred while checking if node belongs to requesting user
            <br>103010- Adding user to nodes mapping request failed
            <br>103011- User node mapping request has timed out
            <br>103012- Removing user to node mapping failed
            <br>103013- User to node mapping does not exist
            <br>103019- Removing node group mapping failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - User Node Association
      summary: Get the status of User Node mapping request
      description: ""
      operationId: getUserNodeMappingRequestStatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request_id
          in: query
          description: request Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserNodeMappingRequestStatus"
        "400":
          description: failure<br>Error Codes and Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>100008- Error in fetching tenant context details
            <br>100012- Invalid Request
            <br>103016- RequestId is missing
            <br>103017- Fetching node to User mapping request failed
            <br>103018- User node mapping request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeMappingAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/sharing:
    put:
      tags:
        - User Node Association
      summary: This API creates the sharing of Nodes between users.
      description: "This API allows
                    <ol>
                    <li>Primary users to share the nodes with secondary user. User Name of the secondary user and nodes are mandatory parameters. Metadata is optional parameter, used to store additional info about node sharing request.</li>
                    <li>Secondary user can accept or decline the request for node sharing sent by the primary users.
                    Here accept and request_id are mandatory parameters</li>
                    </ol>"
      operationId: addUserNodeSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRemoveUserNodeSharingRequest'
            examples:
              Add User Node Sharing:
                value:
                  nodes: ["node_id1"]
                  user_name: 'username@domain.com'
                  metadata: { "devices": [
                    {
                      "name": "AC Switch", "type": "esp.device.switch"
                    }]
                    }

              Accept or Decline request:
                value:
                  accept: true
                  request_id: 'request_id'
        description: Add User Node Sharing / Accept or Decline Sharing Request Parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponseWithRequestId'
              examples:
                Add User Node Sharing:
                  value:
                    status: 'success'
                    description: 'Success description'
                    request_id: 'request_id'
                Accept or Decline Sharing request:
                  value:
                    status: 'success'
                    description: 'Success description'
                
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>101001- Error in fetching user details
            <br>107001- Please specify at least one node
            <br>107002- User name is missing
            <br>107003- Self node sharing operations [add/remove] are not allowed.
            <br>107005- Some of the nodes in the Node sharing request does not belong to the user
            <br>107007- User does not exist for sharing
            <br>107008- NodeId is too long
            <br>107011- User to node mapping does not exist
            <br>107017- Specify confirm_sharing or accept parameter correctly. true/false
            <br>107021- Error RequestId is missing
            <br>107022- Node list too long. It can have maximum of 100 nodes.
            <br>107023- Error getting request. Either given request ID is invalid or has already been accepted or declined.
            <br>107024- Error some nodes are missing.
            <br>107027- Error. User should be primary owner of all nodes in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: "failure<br>Error Codes and Error Description
            <br>107004- Error occurred while checking if node belongs to requesting user
            <br>107006- Error occurred while checking user exists
            <br>107010- Adding user to nodes mapping failed
            <br>103010- Adding user to nodes mapping request failed
            <br>107018- Error occurred while updating the request status
            <br>107020- Error getting Request
            "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - User Node Association
      summary: This API removes the sharing of Nodes between the users.
      description: "This API allows the primary users to remove the sharing of nodes with other users."
      operationId: RemoveUserNodeSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: nodes
          in: query
          description: Comma separated nodeids (Example nodes=nodeid1,nodeid2)
          required: true
          schema:
            type: string
        - name: user_name
          in: query
          description: User Name
          required: true
          schema:
            type: string
            example: username@domain.com
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove User Node Sharing:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>100007- Either User Id or User Email needs to be provided
            <br>107001- Please specify at least one node
            <br>107002- User name is missing
            <br>107003- Self node sharing operations[add/remove] are not allowed
            <br>107007- User does not exist for sharing
            <br>107022- Node list too long. It can have maximum of 100 nodes.
            <br>107024- Error some nodes are missing.
            <br>107027- Error. User should be primary owner of all nodes in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>107004- Error occurred while checking if node belongs to requesting user
            <br>107006- Error occurred while checking user exists
            <br>107009- Removing user to node mapping failed
            <br>107011- User to node mapping does not exist
            <br>107015- Removing node group mapping failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - User Node Association
      summary:  This API fetches the sharing details for the nodes the current user is associated with.
      description: "This API is used to fetch the Node sharing details. Here are the details -
                    <ul><li>When no parameters are passed it returns the sharing details of all the nodes that this user is associated with (Primary or Secondary)</li>
                    <li>When node_id is passed, it returns the sharing details of that node. The requesting user can be Primary or Secondary.</li>
                    <li>If the Get node sharing API is called by the secondary user, the list of other secondary users, this node is associated with, is not returned.</li></ul>"
      operationId: getUserNodeSharing
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node Id of node to get the sharing details
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserNodeSharingResponse"
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>100010- Node does not belong to user
            <br>107013- User is not associated with any node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description
            <br>107004- Error occurred while checking if node belongs to requesting user
            <br>107012- Error occurred while fetching shared users of node
            <br>107014- Fetching node to User mapping failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/nodes/sharing/requests:
    get:
      tags:
        - User Node Association
      summary: This API is used to get the sharing requests raised between users.
      description: "This API allows the primary and secondary users to get the sharing requests.
                    <ol>
                    <li>To get the requests raised by primary user, with primary_user flag set as true</li>
                    <li>To get the requests received by secondary user</li>
                    <li>To get the details of a request by request_id</li>
                    </ol>
                    To support pagination start_request_id, start_user_name, num_records are added to the API."
      operationId: getUserNodeSharingRequest
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request_id
          in: query
          description: request Id
          required: false
          schema:
            type: string
        - name: primary_user
          in: query
          description: This is a boolean flag, which is used to denote whether to get the requests raised by Primary user(true) or received by secondary users (false). Default value for this flag is false.
          required: false
          schema:
            type: string
        - name: start_request_id
          in: query
          description: used in pagination
          required: false
          schema:
            type: string
        - name: start_user_name
          in: query
          description: used in pagination along with start_request_id
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: used to specify the no of records that must be returned. Default value is 10. The valid values are in the range of 1 to 10. If invalid value is given, default value is used.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/GetNodeSharingRequestResponse'
              examples:
                Get User Node Sharing Response:
                  value:
                    sharing_requests:
                      - request_id: "<request_id>"
                        request_status: "declined/pending"
                        request_timestamp: 1612182919
                        node_ids: 
                            - "thing1"
                            - "thing2"
                        user_name: secondary_user@domain.com
                        primary_user_name: primary_user@domain.com
                        metadata: { "devices": [
                        {
                          "name": "AC Switch", "type": "esp.device.switch"
                        }]
                      }

                    next_request_id: next_request_id
                    next_user_name: next_user_name
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100007- Either User Id or User Email needs to be provided
            <br>101001- Error in fetching user details
            <br>107019- Specify primary_user parameter correctly. [Valid options are primary_user=true or primary_user=false or don't specify it. Default is false]
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description
            <br>107020- Error getting Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - User Node Association
      summary: This API removes the sharing request of Nodes between the users.
      description: "This API allows the primary users to remove the sharing request of nodes with other users."
      operationId: removeUserNodeSharingRequest
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: request_id
          in: query
          description: Request Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
              examples:
                Remove User Node Sharing Request:
                  value:
                    status: 'success'
                    description: 'Success description'
        "400":
          description: failure<br>Error Codes and Error Description-
            <br>100007- Either User Id or User Email needs to be provided
            <br>101001- Error in fetching user details
            <br>107021- Error RequestId is missing
            <br>107025- Error occurred while removing request as it was declined by the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "404":
          description: failure<br>Error Codes and Error Description-
            <br>107026 - Node sharing request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: failure<br>Error Codes and Error Description-
            <br>107018- Error occurred while updating the request status
            <br>107020- Error getting Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []

    put:
      tags:
        - User Node Association
      summary: This API creates the sharing of Nodes between users.
      description: "This API allows
                    <ol>
                    <li>Primary users to share the nodes with secondary user. User Name of the secondary user and nodes are mandatory parameters. Metadata is optional parameter, used to store additional info about node sharing request.</li></li>
                    <li>Secondary user can accept or decline the request for node sharing sent by the primary users.
                    Here accept and request_id are mandatory parameters</li>
                    </ol>"
      operationId: addUserNodeSharingRequests
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRemoveUserNodeSharingRequest'
            examples:
              Add User Node Sharing:
                value:
                  nodes: ["node_id1"]
                  user_name: 'username@domain.com'
                  metadata: {"devices": [
                    { 
                      "name": "AC Switch", "type": "esp.device.switch"
                    }]
                  }

              Accept or Decline request:
                value:
                  accept: true
                  request_id: 'request_id'
        description: Add User Node Sharing / Accept or Decline Sharing Request Parameters
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponseWithRequestId'
              examples:
                Add User Node Sharing:
                  value:
                    status: 'success'
                    description: 'Success description'
                    request_id: 'request_id'
                Accept or Decline Sharing request:
                  value:
                    status: 'success'
                    description: 'Success description'
                
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>100007- Either User Id or User Email needs to be provided
            <br>101001- Error in fetching user details
            <br>107001- Please specify at least one node
            <br>107002- User name is missing
            <br>107003- Self node sharing operations [add/remove] are not allowed.
            <br>107005- Some of the nodes in the Node sharing request does not belong to the user
            <br>107007- User does not exist for sharing
            <br>107008- NodeId is too long
            <br>107011- User to node mapping does not exist
            <br>107017- Specify confirm_sharing or accept parameter correctly. true/false
            <br>107021- Error RequestId is missing
            <br>107022- Node list too long. It can have maximum of 100 nodes.
            <br>107023- Error getting request. Either given request ID is invalid or has already been accepted or declined.
            <br>107024- Error some nodes are missing.
            <br>107027- Error. User should be primary owner of all nodes in the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
        "500":
          description: "failure<br>Error Codes and Error Description
            <br>107004- Error occurred while checking if node belongs to requesting user
            <br>107006- Error occurred while checking user exists
            <br>107010- Adding user to nodes mapping failed
            <br>103010- Adding user to nodes mapping request failed
            <br>107018- Error occurred while updating the request status
            <br>107020- Error getting Request
            "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
 
  /mqtt_host:
    get:
      tags:
        - IOT Endpoint
      summary: Fetch the IOT endpoint
      description: "This API will Get the IOT endpoint"
      operationId: getIOTEndPoint
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchMqttEndpointResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>109001- Failed to fetch iot endpoint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MqttEndpointAPIFailureResponse"

  /{version}/user/nodes/params:
    put:
      tags:
        - Node Parameter Operations
      summary: Update the Node Parameter
      description: "This API will update the state of the device"
      operationId: updatethingshadow
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetParamsRequestBody"
            examples:
              Single node set params:
                $ref: "#/components/schemas/SetParamsRequestBody"
              Multiple node set params:
                $ref: "#/components/examples/MultiNodesSetParamsRequestBodyExample"
        description: Request body for updating Node Parameter
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "207":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiNodeSetParamsAPIResponseWithNodeId'
        "400":
          description: failure<br>Error codes and Error Description
            <br>100001- Error in fetching user details
            <br>100002- API Version is not supported
            <br>100009- Node Id is missing
            <br>100010- Node does not belong to user
            <br>100012- Invalid Request
            <br>102001- Node is offline
            <br>102002- Updating node parameter failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingShadowAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Node Parameter Operations
      summary: Get the Node parameter
      description: "This API will Get the state of the device"
      operationId: get thing shadow
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetParamsRequestBody"
        "400":
          description: failure<br>Error codes and Error Description
            <br>100001- Error in fetching user details
            <br>100002- API Version is not supported
            <br>100009- Node Id is missing
            <br>100010- Node does not belong to user
            <br>102003- Getting node status failed
            <br>102004- Node does not exist
            <br>102006- Device reported state not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingShadowAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/user/nodes/status:
    get:
      tags:
        - User Node Association
      summary: Get the online or offline status for the node
      description: ""
      operationId: getNodeStatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeConnectivity"
        "400":
          description: failure<br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100002- API Version is not supported
            <br>100009- Node Id is missing
            <br>102005- Getting node parameter failed
            <br>103020- Node does not belong to user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingShadowAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/admin/nodes:
    get:
      tags:
        - User Node Association
      summary: Get the nodes claimed by the Admin user
      description: "This API is to get the node details of nodes claimed by the admin: 
                    <li>When no parameter is passed list of all the nodes and nodeInfo are returned.</li>
                    <li>When type is passed, list of all the nodes and nodeInfo which are of that type are returned.</li>
                    <li>When model & type is passed, list of all the nodes and nodeInfo which are of that model & type are returned.</li>
                    <ul><li><b>Note: type is a required parameter if model is provided.</b></li></ul>
                    <li>When node_id is passed the details of that node (NodeInfo) is returned</li>
                    To support pagination num_records and start_id are present
                    "
      operationId: getAdminUserNodes
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: num_records
          in: query
          description: Used for pagination, number of records to be fetched
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: Used for pagination, Start Id of the record to be fetched
          required: false
          schema:
            type: string
        - name: node_id
          in: query
          description: Used to fetch details of particular node
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Used to fetch list of nodes based on type.
          required: false
          example: led
          schema:
            type: string
        - name: model
          in: query
          description: Used to fetch list of nodes based on model and type.
          required: false
          example: "2021"
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAdminNodesList"
              examples:
                Node_List:
                  value:
                    nodes: ["thing", "thing2"]
                    node_info:
                    - node_id: thing
                      name: "Light"
                      fw_version: "1.0"
                      type: "Lightbulb"
                      model: "led_light"
                      registration_timestamp: "2020-04-22 11:52:00"
                      status:
                        connectivity:
                          connected: true
                          timestamp: 123322222
                    - node_id: thing2
                      name: "Light"
                      fw_version: "1.0"
                      type: "Lightbulb"
                      model: "led_light"
                      registration_timestamp: "2020-04-22 11:52:00"
                      status:
                        connectivity:
                          connected: true
                          timestamp: 123322222
                    next_id: "thing2"
                    total: 123
                    quota: 5
                When Node_id is passed:
                  value:
                    node_id: thing1
                    name: "Light"
                    fw_version: "1.0"
                    type: "Lightbulb"
                    model: "led_light"
                    registration_timestamp: "2020-04-22 11:52:00"
                    status:
                      connectivity:
                        connected: true
                        timestamp: 123322222
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100014- Getting node details failed
            <br>100011- Invalid JSON received
            <br>105021- Please claim nodes to start using the OTA
            <br>105022- Error occurred while fetching claimed nodes for user
            <br>105023- Failed to get quota info for user
            <br>105034- Error, if model is provided then type also needs to be provided
        "404":
          description: failure <br>Error Codes and Error Description
            <br>100015- Nodes do not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - User Node Association
      summary: Activate or Deactivate the Node
      description: "This api is used to activate or deactivate the Node"
      operationId: updateNodeCertificateStatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: activate
          in: query
          description: Used for specifying either to activate the node or deactivate the node
          required: true
          schema:
            type: boolean
        - name: node_id
          in: query
          description: Used to specify nodeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>105018- NodeId is missing
            <br>105025- Please specify operation to be performed [activate=true or activate=false]
            <br>100014- Getting node details failed
            <br>100015- Nodes do not exist
            <br>105026- Error occurred while fetching node details
            <br>105027- Error occurred while updating node certificate status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNodeSharingAPIFailureResponse"
      security:
        - AccessToken: []
  /{version}/admin/otaimage:
    post:
      tags:
        - OTA Service
      summary: This API is used for uploading a new Firmware image
      description: "This API uploads the new Firmware image to Rainmaker Cloud."
      operationId: adminuploadotaimage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtaImageCreateRequest'
            examples:
              Upload OTA Image:
                value:
                  fw_version: '1.0'
                  image_name: 'Alexa echo 2'
                  model: 'echo 2'
                  type: 'alexa'
                  base64_fwimage: 'base 64 encoded image string'
        description: Request body for uploading new firmware image. List of optional parameters
                     <ul>
                     <li>fw_version</li>
                     <li>model</li>
                     <li>type</li>
                     </ul>
                     <h3>These above parameters will be fetched from base64_fwimage when not passed in request body.<br>
                     If absent in both places then error will be returned.</h3>
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtaImageCreateResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100006- Invalid request body
            <br>104001- Base64 firmware image is missing
            <br>104002- Image Name is missing
            <br>104003- Error occurred while parsing image
            <br>104004- Firmware version is missing
            <br>104005- Model is missing
            <br>104006- Error occurred while fetching OTA image
            <br>104007- Error occurred while fetching OTA image associated with another otajob
            <br>104008- OTA Image is associated with another OTA job, can't update
            <br>104009- Error occurred while generating OTA image id
            <br>104010- OTA Image size should be smaller than 5 mb
            <br>104011- Invalid base64 firmware image
            <br>104012- The OTA Service is being set-up for your account. Please try again after some time
            <br>104013- Error occurred while uploading OTA image
            <br>104014- Error occurred while saving OTA image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - OTA Service
      summary: Get the details about OTA images for the user
      description: "This API gives the details about the OTA image. If the ota_image_id or the ota_image_name is not specified, all the images for the user are returned"
      operationId: getOTAImage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_image_id
          in: query
          description: OTA Image Id
          required: false
          schema:
            type: string
        - name: image_name
          in: query
          description: OTA Image Name
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: OTA Image Type
          required: false
          schema:
            type: string
        - name: model
          in: query
          description: OTA Image Model
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: Used for pagination, number of records to be fetched
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: Used for pagination, Start Id of the record to be fetched
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOTAImageResponse"
              examples:
                GetOTAImageList: 
                    $ref: "#/components/examples/GetOTAImageArrayResponse"
                GetOTAImageInfoByImageId: 
                    $ref: "#/components/examples/GetOTAImageResponseByImageId"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>104006- Error occurred while fetching OTA image
            <br>104015- OTA image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - OTA Service
      summary: Delete the  OTA Image for the user
      description: "This API deletes the OTA image for the user, if it is not used in any of the OTA jobs. If the OTA image is used in any of the OTA jobs, an error is returned."
      operationId: deleteOTAImage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_image_id
          in: query
          description: OTA Image Id
          required: true
          schema:
            type: string
        - name: force_delete
          in: query
          description: Delete the OTA Image forcefully (Even if it is associated with any cancelled OTA Job)
          required: false
          schema:
            type: string
            default: 'false'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>104006- Error occurred while fetching OTA image
            <br>104007- Error occurred while fetching OTA image associated with another otajob
            <br>104015- OTA image not found
            <br>104016- OTA Image is associated with OTA job, can't be deleted
            <br>104017- Error in deleting OTA image
            <br>104018- OTA Image Id is missing
            <br>104020- OTA Image is associated with an active OTA job, can't be deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/otajob:
    post:
      tags:
        - OTA Service
      summary: This API creates a new OTA job
      description: "This API creates a new OTA job. The user needs to specify the OTA Image ID, Job name, nodes and/or groups. Currently, the OTA update can be pushed for upto 100 nodes and/or 10 groups of nodes or all claimed nodes (Group:FFFF-FFFF) in a single request. For pushing the OTA Update to a group of nodes, the **groups** parameter must be filled with a list of group IDs. For pushing the OTA update to all the claimed nodes, user needs to specify the group_id as **FFFF-FFFF**"
      operationId: createotajob
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: force_push
          in: query
          description: Force push OTA image
          required: false
          schema:
            type: string
            default: 'false'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtaJobCreateRequest'
            examples:
              Create a new OTA job Upload:
                value:
                  ota_job_name: 'OTA Job for Alexa devices, FW version 1.0 '
                  groups: ["FFFF-FFFF"]
                  nodes: ["node_id1", "node_id2"]
                  ota_image_id: "Image Id which needs to be pushed"
        description: Request body for creating a new OTA Job
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtaJobCreateResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>100006- Invalid request body
            <br>100013- Failed to generate JSON response
            <br>104006- Error occurred while fetching OTA image
            <br>104018- OTA Image Id is missing
            <br>104015- OTA image not found
            <br>105001- OTA job name is missing
            <br>105002- OTA nodeId or groupId is missing
            <br>105003- Currently only 1 node or group is supported in nodes or groups
            <br>105004- Error occurred while fetching OTA job info
            <br>105005- OTA job name already exists
            <br>105006- Failed to save OTA job details
            <br>105007- Failed to save OTA node status
            <br>105008- Failed to save latest OTA node status
            <br>105009- The OTA Service is being set-up for your account. Please try again after some time
            <br>105010- Error occurred while creating pre-signed url
            <br>105011- Error occurred while publishing to topic
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - OTA Service
      summary: Get the details about OTA jobs for the user
      description: "This API provides the details about the OTA job created by the user. 
                    <ol><li>If the user specifies <b>ota_job_id</b> or <b>ota_job_name</b>, then the details about the specific job are returned</li>
                    <li>If <b>ota_image_id</b> is provided then the latest ota job that is not archived by the user with that image id will be returned and if <b>archived</b> is set as true then latest ota job that is archived by the user with that image id will be returned </li>
                    <li>If <b>archived</b> is provided as true, then the all ota job that are archived by the user will be returned</li>
                    <li>If <b>all</b> is provided as true, then all the OTA jobs created by the user are returned</li>
                    <li>else the details about all the OTA jobs that have been created by the user and are not archived will be returned.</li></ol>"
      operationId: getOTAJob
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_job_id
          in: query
          description: OTA Job Id
          required: false
          schema:
            type: string
        - name: ota_job_name
          in: query
          description: OTA Job name
          required: false
          schema:
            type: string
        - name: ota_image_id
          in: query
          description: OTA Image Id
          required: false
          schema:
            type: string
        - name: num_records
          in: query
          description: Used for pagination, number of records to be fetched
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: Used for pagination, Start Id of the record to be fetched
          required: false
          schema:
            type: string
        - name: archived
          in: query
          description: Flag to get archived ota jobs. [Valid values are true/false]
          required: false
          schema:
            type: boolean
            default: false
        - name: all
          in: query
          description: Flag to get all the ota jobs irrespective whether a job is archived or not. [Valid values are true/false]
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOTAJobResponse"
              examples:
                Default Output: 
                  $ref: "#/components/examples/GetOTAJobs"
                When queried with ota_job_id or ota_job_name or ota_image_id : 
                  $ref: "#/components/examples/GetOTAJob"
                When queried with archived or all as true : 
                  $ref: "#/components/examples/GetArchivedOTAJobs"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>105004- Error occurred while fetching OTA job info
            <br>105012- OTA job not found
            <br>105013- Error occurred while fetching node OTA status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - OTA Service
      summary: Cancel/Archive an OTA job
      description: "This API cancels/archives OTA job. The user needs to specify the OTA Job Id and archive flag in request body.
                    <br><b>NOTE: An OTA Job can be archived only when it is in canceled state.</b>"
      operationId: cancelOrArchiveOtaJob
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtaJobCancelRequest'
            examples:
              Cancel OTA job:
                value:
                  ota_job_id: 'ota_job_id'
              Archive OTA job:
                value:
                  ota_job_id: 'ota_job_id'
                  archive: true
        description: Request body for cancelling/archiving OTA Job
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTACancelJob"
              examples:
                Cancel OTA Job:
                  value:
                    ota_job_id: string
                    ota_job_name: string
                    ota_image_id: string
                    completed_count: 0
                    total_count: 1
                    triggered_timestamp: string
                    cancelled_timestamp: string
                    groups: 
                      - FFFF-FFFF
                    status: cancelled
                Archive OTA Job:
                  value:
                    ota_job_id: string
                    ota_job_name: string
                    ota_image_id: string
                    completed_count: 0
                    total_count: 1
                    triggered_timestamp: string
                    cancelled_timestamp: string
                    groups: 
                      - FFFF-FFFF
                    status: cancelled
                    archived: true
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>100006- Invalid request body
            <br>105014- OTA Job Id is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "404":
          description: failure <br>Error Codes and Error Description
            <br>105015- Either Job is cancelled or Job does not exists
            <br>105032- Either Job is not cancelled or Job does not exists or is already archived
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
        "500":
          description: failure <br>Error Codes and Error Description
            <br>105004- Error occurred while fetching OTA job info
            <br>105016- Error occurred while cancelling job
            <br>105033- Error occurred while archiving the job
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/otajob/status:
    get:
      tags:
        - OTA Service
      summary: This API provides status of the the OTA job
      description: "This API provides the status of the OTA job. It provides the details about the OTA job and the latest OTA status for the nodes. "
      operationId: getOTAJobStatus
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_job_id
          in: query
          description: OTA Job Id
          required: true
          schema:
            type: string
        - name: node_id
          in: query
          description: node Id
          required: false
          schema:
            type: string
        - name: summary
          in: query
          description: OTA Job summary
          required: false
          schema:
            type: boolean
        - name: num_records
          in: query
          description: Used for pagination, number of records to be fetched
          required: false
          schema:
            type: string
        - name: start_id
          in: query
          description: Used for pagination, Start Id of the record to be fetched
          required: false
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtaJobNodeStatusResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>105013- Error occurred while fetching node OTA status
            <br>105014- OTA Job Id is missing
            <br>105017- Error occurred while fetching latest node OTA status
            <br>105024- OTA status not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/otajob/status/summary:
    get:
      tags:
        - OTA Service
      summary: This API provides summary of the the OTA job
      description: "This API provides the summary of the OTA job. It provides the count of nodes with various OTA status -  **triggered, in_progress, success, failed and the total count**. "
      operationId: getOTAJobStatusSummary
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: ota_job_id
          in: query
          description: OTA Job Id
          required: true
          schema:
            type: string
            default: 'v1'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtaJobSummaryResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>105012- OTA job not found
            <br>105013- Error occurred while fetching node OTA status
            <br>105014- OTA Job Id is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/otaimage:
    post:
      tags:
        - OTA Service
      summary: API for the end user to upload a new firmware image
      description: "Using this API end user can upload a new firmware image. Using image url received in the response, the user can push the OTA for the device"
      operationId: useruploadotaimage
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOTAImageRequest'
            examples:
              Upload OTA Image:
                value:
                  type: 'Image type'
                  image_name: 'Image name'
                  base64_fwimage: 'base64_fwimage'
        description: Request body for uploading new firmware image. type is optional parameter.
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOTAImageResponse"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100006- Invalid request body
            <br>104001- Base64 firmware image is missing
            <br>104002- Image Name is missing
            <br>104003- Error occurred while parsing image
            <br>104004- Firmware version is missing
            <br>104005- Model is missing
            <br>104006- Error occurred while fetching OTA image
            <br>104007- Error occurred while fetching OTA image associated with another otajob
            <br>104008- OTA Image is associated with another OTA job, can't update
            <br>104009- Error occurred while generating OTA image id
            <br>104010- OTA Image size should be smaller than 5 mb
            <br>104011- Invalid base64 firmware image
            <br>104012- The OTA Service is being set-up for your account. Please try again after some time
            <br>104013- Error occurred while uploading OTA image
            <br>104014- Error occurred while saving OTA image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAImageAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/nodes/ota_update:
    get:
      tags:
        - OTA Service
      summary: Get latest OTA update for the node associated with the user
      description: "Using this API the end user can check if there is any OTA update, for the node which is associated with his account"
      operationId: getotaupdate
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: node_id
          in: query
          description: node Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOTAUpdateRequest"
        "400":
          description: failure <br>Error Codes and Error Description
            <br>100001- Error in fetching user details
            <br>100008- You are not authorized to perform this operation, Please contact administrator
            <br>100010- Node does not belong to User
            <br>100013- Failed to generate JSON response
            <br>104006- Error occurred while fetching OTA image
            <br>104015- OTA image not found
            <br>105007- Failed to save OTA node status
            <br>105008- Failed to save latest OTA node status
            <br>105009- The OTA Service is being set-up for your account. Please try again after some time
            <br>105010- Error occurred while creating pre-signed url
            <br>105011- Error occurred while publishing to topic
            <br>105017- Error occurred while fetching latest node OTA status
            <br>105018- NodeId is missing
            <br>105019- Error occurred while fetching latest OTA update
            <br>105020- No latest OTA update found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTAJobAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/admin/node_group:
    post:
      tags:
        - Device grouping
      summary: Create admin device group
      description: "This API will create admin device group"
      operationId: createdevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeviceGroupRequest"
            examples:
              Create device group:
                value:
                  group_name: 'group_name'
                  parent_group_id: "group_id"
                  type: "metadata"
                  nodes: ["node_id1"]
                  description: "description"
        description: "Request body for creating new device group.
                      <br><br><b>Mandatory Parameters:</b> 
                    <ul><li>group_name</li></ul>
                    <br>
                    <b>Optional Parameters:</b>
                    <ol><li>nodes -> the list of nodes to be added to the group. </li>
                    <li>parent_group_id</li>
                    <li>description</li>
                    <li>type</li></ol>
                    <br><b>If the nodes list is not specified, then node group is created, without any nodes in it.</b>"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeviceGroupResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108001- Group name is missing
            <br>108002- Group name must be 2 to 256 characters long
            <br>108003- Number of nodes specified should be between 1 and 100
            <br>108004- Error occurred while storing node group info details
            <br>108005- Error occurred while storing node group mapping details
            <br>108006- Error occurred while storing node group children details
            <br>108007- Group name already exists
            <br>108008- Error occurred while fetching node group info details
            <br>108009- Invalid group parent id
            <br>108010- Error occurred while fetching node group mapping details
            <br>108011- Sub group can not be created
            <br>108012- Some of the nodes are not claimed by user
            <br>108014- Error occurred while fetching user node association details
            <br>108015- Some of the nodes are not present in parent group
            <br>108025- The length of group description must be less than 500 characters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - Device grouping
      summary: Update admin device group
      description: "This API will update admin device group"
      operationId: updatedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDeviceGroupRequest"
            examples:
              Update device group:
                value:
                  group_name: 'group_name'
                  type: "metadata"
                  operation: 'operation'
                  nodes: ["node_id1"]
                  description: "description"
              Remove nodes from Device Group:
                value:
                  operation: 'remove'
                  nodes: ["node_id1","node_id2"]
        description: "Request body for updating the existing node group.
                      <ol><li>Using this API, the user can either add or remove the nodes to the group or change the parameters of the group like group name and type. 
                    <li>The value of operation can be <b>add or remove</b>. 
                    <li>While adding or removing nodes, nodes array is required to be specified in the request body. 
                    <li>For updating group name, description and type , the new values for these parameters need to be specified."
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108002- Group name must be 2 to 256 characters long
            <br>108003- Number of nodes specified should be between 1 and 100
            <br>108006- Error occurred while storing node group mapping details
            <br>108007- Group name already exists
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108012- Some of the nodes are not claimed by user
            <br>108014- Error occurred while fetching user node association details
            <br>108015- Some of the nodes are not present in parent group
            <br>108016- Group id is missing
            <br>108017- Invalid operation specified.[Valid operation values are add/remove]
            <br>108018- Error occurred while updating node group info details
            <br>108019- Error occurred while removing node group mappings
            <br>108020- Error occurred while fetching sub groups
            <br>108023- Group does not exist
            <br>108024- Either group name, type, description or operation needs to specified
            <br>108025- The length of group description must be less than 500 characters
            <br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Device grouping
      summary: Get admin device group
      description: "This API will get the details about the admin device group.
                    <ol><li> By Default all the groups with their sub-groups will be returned</li>
                    <li>When group_id or group_name is passed then details of that group will be returned, with nodes and subgroups.</li>
                    <ul><li>To get node details set node_details flag to true.</li>
                    <li>start_id and num_records are used for pagination of nodes and node_details.</li>
                    <li>when node details is requested then nodes array will be removed from the output.</li> </ul>
                    </ol>"
      operationId: admingetdevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group Id
          schema:
            type: string
        - name: group_name
          in: query
          description: group Name
          schema:
            type: string
        - name: node_details
          in: query
          description: optional flag **(true/false)**, to indicate if the node_details is required in the response
          schema:
            type: boolean
            default: false
        - name: start_id
          in: query
          description: when group_id is passed, this is used for the pagination of nodes and node_details
          schema:
            type: string
        - name: num_records
          in: query
          description: when group_id is passed, this is used for the pagination of nodes and node_details
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceGroupResponse'
              examples:
                Default output:
                  $ref: '#/components/examples/GetDeviceGroupWithoutNodesListResponse'
                When group_id is set:
                  $ref: '#/components/examples/GetNodeGroupByIdWithNodesAndSubgroups'
                When group_id is set with node_details=true:
                  $ref: '#/components/examples/GetNodeGroupByIdWithNodeDetails'
                When group_name is set:
                  $ref: '#/components/examples/GetNodeGroupByNameWithNodesAndSubgroups'
                When group_name is set with node_details=true:
                  $ref: '#/components/examples/GetNodeGroupByNameWithNodeDetails'
                  
        "400":
          description: failure
            <br> Error Codes and Error Description
            <br>108023- Group does not exist
            <br>108029 - Specify either one group_id or group_name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br> Error Codes and Error Description
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108020- Error occurred while fetching sub groups
            <br>108026- Error occurred while getting node details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "404":
          description: failure
            <br> Error Codes and Error Description
            <br>108027- You haven't created any groups yet
            <br>108028 - Group with the group name doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Device grouping
      summary: Delete admin device group
      description: "This API will delete admin device group"
      operationId: deletedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108008- Error occurred while fetching node group info details
            <br>108016- Group id is missing
            <br>108022- Error occurred while deleting group
            <br>108023- Group does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []

  /{version}/user/node_group:
    post:
      tags:
        - Device grouping
      summary: Create the user device group
      description: "This API is used for creating new node group. The maximum level for the Node Group hierarchy can be upto three."
      operationId: usercreatedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeviceGroupRequest"
            examples:
              Create device group:
                value:
                  group_name: 'group_name'
                  parent_group_id: 'parent_group_id'
                  type: 'group_metadata'
                  nodes: ["node_id1"]
                  description: "description"
        description: "Request body for creating new device group.
                      <br><br><b>Mandatory Parameters:</b> 
                    <ul><li>group_name</li></ul>
                    <br>
                    <b>Optional Parameters:</b>
                    <ol><li>nodes -> the list of nodes to be added to the group. </li>
                    <li>parent_group_id</li>
                    <li>description</li>
                    <li>type</li></ol>
                    <br><b>If the nodes list is not specified, then node group is created, without any nodes in it.</b>"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeviceGroupResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108001- Group name is missing
            <br>108002- Group name must be 2 to 256 characters long
            <br>108003- Number of nodes specified should be between 1 and 100
            <br>108004- Error occurred while storing node group info details
            <br>108005- Error occurred while storing node group mapping details
            <br>108006- Error occurred while storing node group children details
            <br>108007- Group name already exists
            <br>108008- Error occurred while fetching node group info details
            <br>108009- Invalid group parent id
            <br>108010- Error occurred while fetching node group mapping details
            <br>108011- Sub group can not be created
            <br>108013- Some of the nodes are not mapped by user
            <br>108014- Error occurred while fetching user node association details
            <br>108015- Some of the nodes are not present in parent group
            <br>108025- The length of group description must be less than 500 characters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    put:
      tags:
        - Device grouping
      summary: Update user device group
      description: "This API will update user device group"
      operationId: userupdatedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDeviceGroupRequest"
            examples:
              Update device group:
                value:
                  group_name: 'group_name'
                  operation: 'add/remove'
                  type: 'type'
                  nodes: ["node_id1"]
                  description: "description"
        description: "Request body for updating the existing node group.
                      <ol><li>Using this API, the user can either add or remove the nodes to the group or change the parameters of the group like group name and type. 
                    <li>The value of operation can be <b>add or remove</b>. 
                    <li>While adding or removing nodes, nodes array is required to be specified in the request body. 
                    <li>For updating group name, description and type , the new values for these parameters need to be specified."
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISuccessResponse'
        "400":
          description: failure
            <br>Error Codes and Error Description
            <br>100006- Invalid request body
            <br>108002- Group name must be 2 to 256 characters long
            <br>108003- Number of nodes specified should be between 1 and 100
            <br>108005- Error occurred while storing node group info details
            <br>108007- Group name already exists
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108012- Some of the nodes are not claimed by user
            <br>108014- Error occurred while fetching user node association details
            <br>108015- Some of the nodes are not present in parent group
            <br>108016- Group id is missing
            <br>108017- Invalid operation specified.[Valid operation values are add/remove]
            <br>108018- Error occurred while updating node group info details
            <br>108019- Error occurred while removing node group mappings
            <br>108020- Error occurred while fetching sub groups
            <br>108023- Group does not exist
            <br>108024- Either group name, type, description or operation needs to specified
            <br>108025- The length of group description must be less than 500 characters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    get:
      tags:
        - Device grouping
      summary: Get user device group
      description: "This API will get the details about the user device group.
                    <ol><li>By Default all the groups with their details will be returned</li>
                    <li>To get list of nodes in a group or for all groups, set node_list flag to true.</li>
                    <li>To get sub groups in a group or for all groups, set sub_groups flag to true.</li>
                    <li>When group_id is passes then details of that group will be returned.</li>
                    <li>When group_name is passes then details of that group will be returned.</li>
                    <ul>
                    <li>To get node details set node_details flag to true.</li>
                    <li>When node details is requested, the nodes array will be removed from the output.</li></ul>
                    <li>The node_details flag is applicable only when group_id or group_name is passed</li>
                    </ol>"
      operationId: usergetdevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group Id
          schema:
            type: string
        - name: optional group_name
          in: query
          description: group Name
          schema:
            type: string
        - name: node_list
          in: query
          description: optional flag **(true/false)**, to indicate if the node list is required in the response
          schema:
            type: boolean
            default: false
        - name: sub_groups
          in: query
          description: optional flag **(true/false)**, to indicate if the sub groups list is required in the response
          schema:
            type: boolean
            default: false
        - name: node_details
          in: query
          description: optional flag **(true/false)**, to indicate if the node_details is required in the response
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceGroupResponse'
              examples:
                group_id specified, node_details=false, node_list=true, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupResponseGroupID'
                group_id specified, node_details=false, node_list=true, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupNodeListGroupID'
                group_id specified, node_details=false, node_list=false, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupWithoutNodesListResponseGroupID'
                group_id specified, node_details=false, node_list=false, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupBaseGroupID'
                group_id specified, node_details=true, sub_groups=true, node_list=true/false:
                  $ref: '#/components/examples/GetNodeGroupByIdArrayWithNodeDetails'
                group_id specified, node_details=true, sub_groups=false, node_list=true/false:
                  $ref: '#/components/examples/GetNodeGroupByIdArrayWithNodeDetailsWithoutSubGroups'
                group_id not specified, group_name not specified, node_list=true, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupResponse'
                group_id not specified, group_name not specified, node_list=true, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupNodeList'
                group_id not specified, group_name not specified, node_list=false, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupWithoutNodesListResponse'
                group_id not specified, group_name not specified, node_list=false, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupBase'
                group_name is specified, node_details=false, node_list=true, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupResponseGroupName'
                group_name specified, node_details=false, node_list=true, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupNodeListGroupName'
                group_name specified, node_details=false, node_list=false, sub_groups=true:
                  $ref: '#/components/examples/GetDeviceGroupWithoutNodesListResponseGroupName'
                group_name specified, node_details=false, node_list=false, sub_groups=false:
                  $ref: '#/components/examples/GetDeviceGroupBaseGroupName'
                group_name specified, node_details=true, sub_groups=true, node_list=true/false:
                  $ref: '#/components/examples/GetNodeGroupByNameArrayWithNodeDetails'
                group_name specified, node_details=true, sub_groups=false, node_list=true/false:
                  $ref: '#/components/examples/GetNodeGroupByNameArrayWithNodeDetailsWithoutSubGroups'

        "400":
          description: failure
            <br> Error Codes and Error Description
            <br>108023- Group does not exist
            <br>108029 - Specify either group_id or group_name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "500":
          description: failure
            <br> Error Codes and Error Description
            <br>108008- Error occurred while fetching node group info details
            <br>108010- Error occurred while fetching node group mapping details
            <br>108020- Error occurred while fetching sub groups
            <br>108026- Error occurred while getting node details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
        "404":
          description: failure
            <br> Error Codes and Error Description
            <br>108028 - Group with the group name doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []
    delete:
      tags:
        - Device grouping
      summary: Delete user device group
      description: "This API will delete user device group"
      operationId: userdeletedevicegroup
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: group_id
          in: query
          description: group id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APISuccessResponse"
        "400":
          description: failure
            <br>Error Codes And Error Description
            <br>100006- Invalid request body<br>108008- Error occurred while fetching node group info details
            <br>108016- Group id is missing
            <br>108022- Error occurred while deleting group
            <br>108023- Group does not exist
            <br>108028- Error cannot delete group associated with active OTA jobs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceGroupAPIFailureResponse"
      security:
        - AccessToken: []



  /{version}/admin/stats_info:
    get:
      tags:
        - Statistical Service
      summary: This API is used to get the statistical info
      description: "This API is used to get the statistical information for the various Rainmaker operational parameters like, number of registered users or number of registered nodes, etc. This information can be queried based on the parameter name and the duration.
                    <br>The metrics data can be retrieved based on daily count, weekly count, monthly count or yearly count.  Only one duration parameter can be specified as the query parameter.
                    <ol>
                    <li>If none of these stats parameters or duration is specified in the request parameter, then the values for all the stats parameters with their total count is returned as the response.</li>
                    <li>Daily Count -  The start_date and end_date parameters are used to specify the date range, which is only applicable for daily_count. The difference between start and end dates can be maximum of 31 days and the end_date must be strictly greater than the start_date. The start date and end date should be specified in the YYYY-MM-DD format.</li>
                    <li>Weekly Count - The start_month, start_year, end_month, end_year parameters are used to specify the date range for weekly_count. The weekly data can be queried for upto 3 Months</li>
                    <li>Monthly Count - The start_month, start_year, end_month, end_year parameters are used to specify the date range for monthly_count. The monthly data can be queried for upto 12 Months</li>
                    <li>Yearly Count - The start_year, end_year parameters are used to specify the date range for yearly_count. The yearly data can be queried for upto 5 years.</li>
                    </ol>"
      operationId: GetStats
      parameters:
        - name: version
          in: path
          description: API Version (Current supported API Version is 'v1')
          required: true
          schema:
            type: string
            default: 'v1'
        - name: metric_name
          in: query
          description: "There are various metrics supported. They are - 
                      <li>num_registered_users</li> 
                      <li>num_registered_nodes</li>
                      <li>num_users_with_nodes</li>
                      <li>num_users_without_nodes</li>
                      <li>num_timed_out_node_association_reqs</li>
                      <li>num_claimed_nodes</li>
                      <li>num_online_nodes</li>
                      <li>num_offline_nodes</li>
                      Multiple stats parameters can be retrieved in one request, these parameters need to be separated by comma in the request."
          example: "num_offline_nodes,num_registered_nodes,num_registered_users"
          required: false
          schema:
            type: string
        - name: duration
          in: query
          description: "This parameter is user to set the duration of the count .They can be - 
                      <li>daily_count</li>
                      <li>weekly_count</li>
                      <li>monthly_count</li>
                      <li>yearly_count</li>
                      Multiple duration parameters cannot be specified in one request"
          example: "daily_count"
          required: false
          schema:
            type: string
        - name: start_date
          in: query
          description: "This parameter is used to set the start_date, which is applicable only for daily_count. The expected Format for start_date is YYYY-MM-DD"
          example: "2020-04-07"
          required: false
          schema:
            type: string
        - name: end_date
          in: query
          description: "This parameter is used to set the end_date, which is applicable only for daily_count. The expected Format for end_date is YYYY-MM-DD"
          example: "2020-04-07"
          required: false
          schema:
            type: string
        - name: start_month
          in: query
          description: "This parameter is used to set the start_month, which is applicable only for weekly_count and monthly_count. The expected Format for start_month is month name like January. This field is case-insensitive."
          example: December
          required: false
          schema:
            type: string
        - name: end_month
          in: query
          description: "This parameter is used to set the end_month, which is applicable only for weekly_count and monthly_count. The expected Format for end_month is month name like January. This field is case-insensitive."
          example: December
          required: false
          schema:
            type: string
        - name: start_year
          in: query
          description: "This parameter is used to set the start_year, which is applicable only for weekly_count, monthly_count and yearly_count. The expected Format for start_year is YYYY"
          example: 2020
          required: false
          schema:
            type: string
        - name: end_year
          in: query
          description: "This parameter is used to set the end_year, which is applicable only for weekly_count, monthly_count and yearly_count. The expected Format for end_year is YYYY"
          required: false
          example: 2020
          schema:
            type: string
        - name: timezone
          in: query
          description: "This parameter is used to set the timezone(location) from where the query is made, based on <a href='https://urldefense.com/v3/__https://en.wikipedia.org/wiki/List_of_tz_database_time_zones__;!!Hd5UnLY!mOa_3ZUZ41TndmuNUiO9nEEkgmmSpxvjdNE5ejTfIHGU-0owpw0pTiQ6T0CAlsrY$ '>IANA Tz Database name</a>. TimeZone can also be provided like EST but location name is preferred. This field is case-insensitive."
          required: false
          example: Asia/Calcutta
          schema:
            type: string
            default: UTC
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPISuccessResponse"
              examples:
                Default Output:
                  $ref: '#/components/examples/StatsDefaultData'
                Daily Data:
                  $ref: '#/components/examples/StatsDailyData'
                Weekly Data:
                  $ref: '#/components/examples/StatsWeeklyData'
                Monthly Data:
                  $ref: '#/components/examples/StatsMonthlyData'
                Yearly Data:
                  $ref: '#/components/examples/StatsYearlyData'
                
        "400":
          description: failures
            <br>Error Codes And Error Description
            <br>100001- Error in fetching user details
            <br>100002- API Version is not supported
            <br>100004- You are not authorized to perform this operation, Please contact administrator
            <br>101025- User does not exist
            <br>118001- Error, Please provide a valid duration
            <br>118002- Error, Please provide valid metrics list separated by comma
            <br>118004- Error, the start date parameter is not specified correctly. Please Specify the value in YYYY-MM-DD format.
            <br>118005- Error, the end date parameter is not specified correctly. Please Specify the value in YYYY-MM-DD format.
            <br>118006- Weekly data can only be retrieved over a period of one to three months
            <br>118007- Monthly data can only be retrieved over a period of one to twelve months
            <br>118008- Yearly data can only be retrieved over a period of one to five years
            <br>118009- Daily data can only be retrieved over a period of one to thirty days
            <br>118010- Error, the end month parameter is not specified correctly. Valid value is name of month (e.g. January)
            <br>118011- Error, the end year parameter is not specified correctly. Please Specify the value in YYYY format
            <br>118012- Error, the start month parameter is not specified correctly. Valid value is name of month (e.g. January)
            <br>118013- Error, the start year parameter is not specified correctly. Please Specify the value in YYYY format
            <br>118014- Error, Please specify the timezone parameter correctly
            <br>118015- Error, the specified date range is invalid. End date must be greater than Start date
            <br>118016- Error, The date range contains future dates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPIFailureResponse"
        "500":
          description: Server failures
            <br>Error Codes And Error Description
            <br>118003- Error getting the stats from DB. Please Query after some time.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsAPIFailureResponse"
      security:
        - AccessToken: []
externalDocs:
  description: Find out more about Swagger
  url: https://urldefense.com/v3/__http://swagger.io__;!!Hd5UnLY!mOa_3ZUZ41TndmuNUiO9nEEkgmmSpxvjdNE5ejTfIHGU-0owpw0pTiQ6TxUnXWOd$ 
servers:
  - url: https://urldefense.com/v3/__https://api.rainmaker.espressif.com__;!!Hd5UnLY!mOa_3ZUZ41TndmuNUiO9nEEkgmmSpxvjdNE5ejTfIHGU-0owpw0pTiQ6TwqI2b6L$ 
components:
  parameters:
    Pagelength:
      name: pagelength
      in: query
      description: Number of records to return
      schema:
        type: number
    Startindex:
      name: startindex
      in: query
      description: Start index for paging
      schema:
        type: number
  securitySchemes:
    AccessToken:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    APIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse
    APISuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        description:
          type: string
          example: 'Success description'
      xml:
        name: APISuccessResponse
    APISuccessResponseWithRequestId:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        description:
          type: string
          example: 'Success description'
        request_id:
          type:  string
          example: '123232323232'
      xml:
        name: APISuccessResponseWithRequestId

    APIResponseWithNodeId:
      type: object
      properties:
        node_id:
          type:  string
          example: 'node_id'
        status:
          type: string
          example: 'success'
        description:
          type: string
          example: 'Success description'
      xml:
        name: APIResponseWithNodeId

    MultiNodeSetParamsAPIResponseWithNodeId:
      type: array
      items:
        $ref: '#/components/schemas/APIResponseWithNodeId'
      xml:
        name: MultiNodeSetParamsAPIResponseWithNodeId

    UserLoginRequest:
      type: object
      properties:
        user_name:
          type: string
        password:
          type: string
          minimum: 8
          maximum: 256
      xml:
        name: logindata
    ExtendSessionRequest:
      type: object
      properties:
        user_name:
          type: string
        refreshtoken:
          type: string
      xml:
        name: logindata
    CreateUserRequest:
      type: object
      properties:
        user_name:
          type: string
        password:
          type: string
          minimum: 8
          maximum: 256
      xml:
        name: logindata
    ConfirmUserRequest:
      type: object
      properties:
        user_name:
          type: string
        verification_code:
          type: string
          minimum: 6
          maximum: 6
      xml:
        name: logindata
    LoginSuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, failure]
        description:
          type: string
        idtoken:
          type: string
        accesstoken:
          type: string
        refreshtoken:
          type: string
      xml:
        name: loginSuccessResponsedata
    LoginExtendSessionResponse:
      type: object
      properties:
        status:
          type: string
        description:
          type: string
        idtoken:
          type: string
        accesstoken:
          type: string
      xml:
        name: loginNewPasswdResponsedata
    GetUserResponse:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        super_admin:
          type: boolean
        picture_url:
          type: string
        name:
          type: string
      xml:
        name: getUserResponsedata

    PasswordChangeRequest:
      type: object
      properties:
        password:
          type: string
          minimum: 8
          maximum: 256
        newpassword:
          type: string
          minimum: 8
          maximum: 256
    ForgotPasswordRequest:
      type: object
      properties:
        user_name:
          type: string
    ForgotPasswordConfirm:
      type: object
      properties:
        user_name:
          type: string
        password:
          type: string
          minimum: 8
          maximum: 256
        verification_code:
          type: string
          minimum: 6
          maximum: 6
    UpdateNameRequest:
      type: object
      properties:
        name:
          type: string
    GetNodesList:
      type: object
      properties:
        nodes:
          type: string
          example: '[ nodeid1, ... ]'
        node_details:
          $ref: "#/components/schemas/NodeDetails"
        next_id:
          type: string
          example: 'nodeid1'
        total:
          type: number
          example: 5
      xml:
        name: GetNodesListData
    GetAdminNodesList:
      type: object
      properties:
        nodes:
          type: array
          items:
            type: string
            example: node_id1
        node_info:
          type: array
          items:
            $ref: "#/components/schemas/NodeInfo"
        total:
          type: number
          example: 1
        next_id:
          type: string
          example: node_id1
      xml:
        name: GetNodesListData
    NodeInfo:
      type: object
      properties:
        node_id:
          type: string
          example: node_id1
        name:
          type: string
          minimum: 12
          maximum: 36
          example: Light
        fw_version:
          type: string
          example: "1.0"
        type:
          type: string
          example: Lightbulb
        model:
          type: string
          example: led_light
        registration_timestamp:
          type: string
          example: "2020-04-22 11:52:00"
        status:
          $ref: "#/components/schemas/NodeConnectivity"
    SetParamsRequestBody:
      type: object
      properties:
        Light:
          type: object
          properties:
            brightness:
              type: number
              minimum: 0
              maximum: 100
            output:
              type: boolean
              enum: [true, false]
        Switch:
          type: object
          properties:
            output:
              type: boolean
              enum: [true, false]

      xml:
        name: GetNodesListData

    SetMultiNodeParamsRequestBody:
      type: object
      properties:
        node_id:
          type: string
          example: '<node_id>'
        payload:
          $ref: "#/components/schemas/SetParamsRequestBody"

    SetMultiNodeParamsRequestsBody:
      type: array
      items:
        $ref: "#/components/schemas/SetMultiNodeParamsRequestBody"

    NodeConfiguration:
      type: object
      properties:
        node_id:
          type: string
          minimum: 12
          maximum: 36
          example: 'nodeid1'
        config_version:
          type: string
          example: 'config_version'
        devices:
          type: array
          items:
            $ref: "#/components/schemas/DeviceParameters"
        info:
          type: object
          properties:
            fw_version:
              type: string
              example: 'fw_version'
            name:
              type: string
              minimum: 12
              maximum: 36
              example: 'node_name'
            type:
              type: string
              example: 'node_type'
      xml:
        name: GetNodeConfiguration
    DeviceParameters:
      type: object
      description: Device parameters
      xml:
        name: DeviceParametersConfiguration
    NodeConnectivity:
      type: object
      properties:
        connectivity:
          type: object
          properties:
            connected:
              type: boolean
              enum: [true, false]
              example: true
            timestamp:
              type: integer
              minimum: 13
              maximum: 13
              example: 1584698464101
    AddRemoveUserNodeMappingRequest:
      type: object
      properties:
        node_id:
          type: string
          minimum: 12
          maximum: 36
        secret_key:
          type: string
          minimum: 1
        operation:
          type: string
          enum: [add, remove]
          description: operation can be add or remove
    AddRemoveUserNodeSharingRequest:
      type: object
      properties:
        node_ids:
          type: array
          items:
            type: string
        user_name:
          type: string
        metadata:
          type: object
      required:
        - node_ids
        - user_name
    AcceptOrDeclineNodeSharingRequest:
      type: object
      properties:
        confirm_sharing:
          type: boolean
        request_id:
          type: string
        accept:
          type: boolean
      required:
        - accept
        - request_id
    GetUserNodeSharingResponse:
      type: object
      properties:
        node_sharing:
          type: array
          items:
            $ref: "#/components/schemas/UserNodeSharing"
    UserNodeSharing:
      type: object
      properties:
        node_id:
          type: string
        users:
          type: object
          properties:
            primary:
              type: array
              items:
                type: string
                example: "primary_user@domain.com"
            secondary:
              type: array
              items:
                type: string
                example: "secondary_user@domain.com"
    OtaImageCreateRequest:
      type: object
      properties:
        fw_version:
          type: string
        image_name:
          type: string
        model:
          type: string
        type:
          type: string
        base64_fwimage:
          type: string
      required:
        - base64_fwimage
        - image_name
    OtaJobCreateRequest:
      type: object
      properties:
        ota_job_name:
          type: string
        groups:
          type: string
        nodes:
          type: string
        ota_image_id:
          type: string
    OtaJobCancelRequest:
      type: object
      properties:
        ota_job_id:
          type: string
        archive:
          type: string
      required:
        - "ota_job_id"
    OtaImageCreateResponse:
      type: object
      properties:
        ota_image_id:
          type: string
        image_url:
          type: string
        status:
          type: string
    OtaJobCreateResponse:
      type: object
      properties:
        ota_job_id:
          type: string
        status:
          type: string
    OtaJobSummaryResponse:
      type: object
      properties:
        triggered:
          type: integer
        in_progress:
          type: integer
        success:
          type: integer
        failed:
          type: integer
        total:
          type: integer
    OtaJobNodeStatusResponse:
      type: object
      properties:
        node_ota_status:
          type: array
          items:
            $ref: "#/components/schemas/NodeOtaStatus"
        total:
          type: number
          example: 5
        node_groups:
          type: array
          items:
            $ref: "#/components/schemas/NodeGroup"
        next_id:
          type: string
          example: next_id
    NodeGroup:
      type: object
      properties:
        group_id:
          type: string
          example: shi8VjiQdKhkQkqBguXqK5
        group_name:
          type: string
          example: test_group_1
    NodeOtaStatus:
      type: object
      properties:
        node_id:
          type: string
          example: node_id
        status:
          type: string
          example: ota_status
        timestamp:
          type: string
          example: timestamp
        additional_info:
          type: string
          example: additional_info
    GetOTAImageResponse:
      type: object
      properties:
        ota_images:
          type: array
          items:
            $ref: "#/components/schemas/OTAImage"
        total:
          type: string
          example: total records available
        next_id:
          type: string
          example: id of the next record
    GetOTAJobResponse:
      type: object
      properties:
        ota_jobs:
          type: array
          items:
            $ref: "#/components/schemas/OTAJob"
        total:
          type: integer
          example: 0
        next_id:
          type: string
          example: id of the next record
    OTAImage:
      type: object
      properties:
        ota_image_id:
          type: string
        image_name:
          type: string
        type:
          type: string
        model:
          type: string
        image_url:
          type: string
        fw_version:
          type: string
        upload_timestamp:
          type: number
        file_size:
          type: number
        file_md5:
          type: string
    OTAJob:
      type: object
      properties:
        ota_job_id:
          type: string
        ota_job_name:
          type: string
        ota_image_id:
          type: string
        completed_count:
          type: integer
        total_count:
          type: integer
        triggered_timestamp:
          type: string
        nodes:
          type: string
          example: ["node_id"]
        status:
          type: string
        archived:
          type: boolean

    OTACancelJob:
      type: object
      properties:
        ota_job_id:
          type: string
        ota_job_name:
          type: string
        ota_image_id:
          type: string
        completed_count:
          type: integer
        total_count:
          type: integer
        triggered_timestamp:
          type: string
        cancelled_timestamp:
          type: string
        groups:
          type: string
          example: ["FFFF-FFFF"]
        status:
          type: string
        archived:
          type: boolean

    AddUserNodeMappingResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, failure]
        description:
          type: string
        request_id:
          type: string
    AddUserNodeMappingRequestStatus:
      type: object
      properties:
        request_status:
          type: string
          enum: [requested, confirmed, timedout, discarded]
          example: 'confirmed'

    NodeDetailsObject:
      type: object
      properties:
        id:
          type: string
          minimum: 12
          maximum: 36
          example: 'nodeid1'
        role:
          type: string
          enum: [primary, secondary]
          example: 'primary'
        status:
          $ref: "#/components/schemas/NodeConnectivity"
        config:
          $ref: "#/components/schemas/NodeConfiguration"
        params:
          $ref: "#/components/schemas/SetParamsRequestBody"

    NodeDetails:
      type: array
      items:
        $ref: "#/components/schemas/NodeDetailsObject"

    UserOTAImageRequest:
      type: object
      properties:
        type:
          type: string
        image_name:
          type: string
        base64_fwimage:
          type: string

    UserOTAImageResponse:
      type: object
      properties:
        image_url:
          type: string
        status:
          type: string

    UserOTAUpdateRequest:
      type: object
      properties:
        url:
          type: string
        fw_version:
          type: string
        ota_job_id:
          type: string
        file_size:
          type: number

    CreateDeviceGroupRequest:
      type: object
      properties:
        group_name:
          type: string
          minimum: 1
          maximum: 256
        parent_group_id:
          type: string
        type:
          type: string
        nodes:
          type: array
          items:
            type: string
        description:
          type: string
      required:
        - group_name

    UpdateDeviceGroupRequest:
      type: object
      properties:
        group_name:
          type: string
        operation:
          type: string
        type:
          type: string
        nodes:
          type: array
          items:
            type: string
        description:
          type: string

    CreateDeviceGroupResponse:
      type: object
      properties:
        group_id:
          type: string
          example: "group_id"
        status:
          type: string
          example: "success"

    DeviceGroup:
      type: object
      properties:
        group_name:
          type: string
        group_id:
          type: string
        parent_group_id:
          type: string
        type:
          type: string
        nodes:
          type: array
          items:
            type: string
        node_details:
          items:
            $ref: "#/components/schemas/DeviceGroupNodeDetails"
        description:
          type: string
        total:
          type: integer
        sub_groups:
          items:
            $ref: "#/components/schemas/DeviceGroup"
        next_id:
          type: string

    DeviceGroupNodeDetails:
      type: object
      properties:
        node_id:
          type: string
        name:
          type: string
        fw_version:
          type: string
        type:
          type: string
        model:
          type: string

    GetDeviceGroupResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/DeviceGroup"
        total:
          type: integer
          example: total records available
    
    DeviceGroupAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    OTAImageAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    MqttEndpointAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '109XXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    UserNodeMappingAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    FetchMqttEndpointResponse:
      type: object
      properties:
        mqtt_host:
          type: string
          example: 'mqtt_host_endpoint'
      xml:
        name: APIFailureResponse

    UserNodeSharingAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1XXXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    OTAJobAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'

    ThingShadowAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse

    UserAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '10XXXX'
        description:
          type: string
          example: 'Failure description'
      xml:
        name: APIFailureResponse
        
    SharingDetails:
      type: object
      properties:
        request_id:
          type: string
        request_status:
          type: string
        request_timestamp:
          type: number
        node_ids:
          type: array
          items:
            type: string
        user_name:
          type: string
        primary_user_name:
          type: string
        metadata:
          type: object
      required:
        - request_id
        - request_status
        - request_timestamp
        - node_ids
        - user_name
        - primary_user_name
          
    GetNodeSharingRequestResponse:
      type: object
      properties:
        sharing_requests:
          type: array
          items:
            $ref: "#/components/schemas/SharingDetails"
        next_request_id:
          type: string
        next_user_id:
          type: string
          
    StatsCount:
      type: object
      properties:
        date:
          type: string
          example: "2021-02-23"
        start_date:
          type: string
          example: "2021-02-23"
        end_date:
          type: string
          example: "2021-02-23"
        month:
          type: string
          example: "March"
        year:
          type: string
          example: "2021"
        daily_count: 
          type: number
        weekly_count: 
          type: number
        monthly_count: 
          type: number
        yearly_count: 
          type: number 

    StatsObject:
      type: object
      properties:
        data: 
          type: array
          items:
            $ref: "#/components/schemas/StatsCount"
        total_count: 
          type: number 
   
    StatsAPISuccessResponse:
      type: object
      properties:
        num_registered_users:
            $ref: "#/components/schemas/StatsObject"
        num_registered_nodes:
            $ref: "#/components/schemas/StatsObject"
        num_users_with_nodes:
            $ref: "#/components/schemas/StatsObject"
        num_users_without_nodes:
            $ref: "#/components/schemas/StatsObject"
        num_timed_out_node_association_reqs:
            $ref: "#/components/schemas/StatsObject"
        num_claimed_nodes:
            $ref: "#/components/schemas/StatsObject"
        num_online_nodes:
            type: number
        num_offline_nodes:
            type: number

    StatsAPIFailureResponse:
      type: object
      properties:
        status:
          type: string
          example: 'failure'
        error_code:
          type: string
          example: '1XXXXX'
        description:
          type: string
          example: 'Failure description'
          
  examples:
    GetDeviceGroupResponse:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        nodes: ["node1","node2"],
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
          "nodes": ["node1"],
          "sub_groups":null,
          description: description
         }],
         description: description
         }]
        total: <groups_count>

    GetDeviceGroupWithoutNodesListResponse:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
          "sub_groups":null,
          description: description
         }],
         description: description
         }
        ]
        total: <groups_count>

    GetDeviceGroupWithoutNodesListResponseGroupID:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
          "sub_groups":null,
          description: description
         }],
         description: description}
        ]

    GetDeviceGroupWithGroupIdResponse:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        nodes: ["node1","node2"],
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
          "sub_groups":null,
          description: description
         }],
         description: description},
        ]
        "total": 0
    
    GetDeviceGroupNodeList:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        nodes: ["node1","node2"],
        description: description
        }]
        total: <groups_count>
        
    GetDeviceGroupBase:
      value:
        groups: [{
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          description: description
        }
          ]
        total: <groups_count>
        
    GetDeviceGroupResponseGroupID:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        nodes: ["node1","node2"],
        total: <nodes_count>,
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
          "nodes": ["node1"],
          total: <nodes_count>,
          "sub_groups":null,
          description: description
         }],
         description: description
         }]

    GetDeviceGroupWithGroupIdResponseGroupID:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        nodes: ["node1","node2"],
        total: <nodes_count>,
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
          "sub_groups":null,
          description: description
         }],
         description: description
         },
        ]
    
    GetDeviceGroupNodeListGroupID:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        nodes: ["node1","node2"],
        total: <nodes_count>,
        description: description
        }]

    GetDeviceGroupBaseGroupID:
      value:
        groups: [{
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          description: description
        }
          ]

    GetDeviceGroupResponseGroupName:
      value:
        [
          {
            groups: [
            {
            group_name: group_name,
            group_id: group_id,
            type: type_metadata,
            nodes: ["node1","node2"],
            total: <nodes_count>,
            sub_groups: [{
              "group_name": group_name,
              "group_id": group_id,
              "parent_group_id": parent_group_id,
              "type": type_metadata,
              "nodes": ["node1"],
              total: <nodes_count>,
              "sub_groups":null,
              description: description
            }],
            description: description
            }]
          }
        ]

    GetDeviceGroupNodeListGroupName:
      value:
        [{
          groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          description: description
          }]
        }]
    GetDeviceGroupWithoutNodesListResponseGroupName:
      value:
        [{
          groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          sub_groups: [{
            "group_name": group_name,
            "group_id": group_id,
            "parent_group_id": parent_group_id,
            "type": type_metadata,
            "sub_groups":null,
            description: description
          }],
          description: description}
          ]
        }]
    GetDeviceGroupBaseGroupName:
      value:
        [{
          groups: [{
            group_name: group_name,
            group_id: group_id,
            type: type_metadata,
            description: description
          }
            ]
        }]

    GetNodeGroupByNameArrayWithNodeDetails:
      value:
        [{
          groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          sub_groups: [{
            "group_name": group_name,
            "group_id": group_id,
            "parent_group_id": parent_group_id,
            "type": type_metadata,
              node_details: [
              {
                node_id: string,
                name: string,
                fw_version: string,
                type: string,
                model: string
              }
            ],
            total: <nodes_count>,
            "sub_groups":null,
            description: description
          }],
          description: description
          }]
        }]

    GetNodeGroupByNameArrayWithNodeDetailsWithoutSubGroups:
      value:
        [{
          groups: [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          description: description
          }]
        }]

    StatsWeeklyData:
      value:
        {
            num_registered_users: {
                data: [
                    {
                        weekly_count: 17740,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 18233,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 79811
            },
            num_registered_nodes: {
                data: [
                    {
                        weekly_count: 18066,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 19007,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 82834
            },
            num_users_with_nodes: {
                data: [
                    {
                        weekly_count: 18984,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 18591,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 83970
            },
            num_users_without_nodes: {
                data: [
                    {
                        weekly_count: 18857,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 17828,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 81631
            },
            num_timed_out_node_association_reqs: {
                data: [
                    {
                        weekly_count: 18848,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 18782,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 82967
            },
            num_claimed_nodes: {
                data: [
                    {
                        weekly_count: 18586,
                        start_date: "2021-03-08",
                        end_date: "2021-03-14"
                    },
                    {
                        weekly_count: 18565,
                        start_date: "2021-03-01",
                        end_date: "2021-03-07"
                    }
                ],
                total_count: 82560
            },
            num_online_nodes: 10,
            num_offline_nodes: 12
        }

    StatsDailyData:
      value:
        {
            num_registered_users: {
                data: [
                    {
                        daily_count: 2660,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2576,
                        date: "2021-03-04"
                    }
                ],
                total_count: 79811
            },
            num_registered_nodes: {
                data: [
                    {
                        daily_count: 2763,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2466,
                        date: "2021-03-04"
                    }
                ],
                total_count: 82834
            },
            num_users_with_nodes: {
                data: [
                    {
                        daily_count: 2774,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2572,
                        date: "2021-03-04"
                    }
                ],
                total_count: 83970
            },
            num_users_without_nodes: {
                data: [
                    {
                        daily_count: 2515,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2232,
                        date: "2021-03-04"
                    }
                ],
                total_count: 81631
            },
            num_timed_out_node_association_reqs: {
                data: [
                    {
                        daily_count: 2775,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2544,
                        date: "2021-03-04"
                    }
                ],
                total_count: 82967
            },
            num_claimed_nodes: {
                data: [
                    {
                        daily_count: 2908,
                        date: "2021-03-05"
                    },
                    {
                        daily_count: 2710,
                        date: "2021-03-04"
                    }
                ],
                total_count: 82560
            },
            num_online_nodes: 10,
            num_offline_nodes: 12
        }

    StatsMonthlyData:
      value:
        {
          num_registered_users: {
              data: [
                  {
                      monthly_count: 47109,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 32702,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 79811
          },
          num_registered_nodes: {
              data: [
                  {
                      monthly_count: 47730,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 35104,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 82834
          },
          num_users_with_nodes: {
              data: [
                  {
                      monthly_count: 48673,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 35297,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 83970
          },
          num_users_without_nodes: {
              data: [
                  {
                      monthly_count: 47589,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 34042,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 81631
          },
          num_timed_out_node_association_reqs: {
              data: [
                  {
                      monthly_count: 47911,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 35056,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 82967
          },
          num_claimed_nodes: {
              data: [
                  {
                      monthly_count: 47466,
                      month: "March",
                      year: 2021
                  },
                  {
                      monthly_count: 35094,
                      month: "February",
                      year: 2021
                  }
              ],
              total_count: 82560
          },
          num_online_nodes: 10,
          num_offline_nodes: 12
      }

    StatsYearlyData:
      value:
        {
            num_registered_users: {
                data: [
                    {
                        yearly_count: 79811,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 79811
            },
            num_registered_nodes: {
                data: [
                    {
                        yearly_count: 82834,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 82834
            },
            num_users_with_nodes: {
                data: [
                    {
                        yearly_count: 83970,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 83970
            },
            num_users_without_nodes: {
                data: [
                    {
                        yearly_count: 81631,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 81631
            },
            num_timed_out_node_association_reqs: {
                data: [
                    {
                        yearly_count: 82967,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 82967
            },
            num_claimed_nodes: {
                data: [
                    {
                        yearly_count: 82560,
                        year: "2021"
                    },
                    {
                        yearly_count: 0,
                        year: "2020"
                    }
                ],
                total_count: 82560
            },
            num_online_nodes: 10,
            num_offline_nodes: 12
        }

    StatsDefaultData:
      value:
        {
            num_registered_users: {
                total_count: 79811
            },
            num_registered_nodes: {
                total_count: 82834
            },
            num_users_with_nodes: {
                total_count: 83970
            },
            num_users_without_nodes: {
                total_count: 81631
            },
            num_timed_out_node_association_reqs: {
                total_count: 82967
            },
            num_claimed_nodes: {
                total_count: 82560
            },
            num_online_nodes: 10,
            num_offline_nodes: 12
        }

    GetOTAImageArrayResponse:
      value:
        {
          ota_images: [
            {
              ota_image_id: string,
              image_name: string,
              type: string,
              model: string,
              image_url: string,
              fw_version: string,
              upload_timestamp: 0,
              file_size: 0,
              file_md5: string
            }
          ],
          total: total records available,
          next_id: id of the next record
        }

    GetOTAImageResponseByImageId:
      value:
        {
          ota_image_id: string,
          image_name: string,
          type: string,
          model: string,
          image_url: string,
          fw_version: string,
          upload_timestamp: 0,
          file_size: 0,
          file_md5: string
        }

    GetOTAJobs:
      value:
        {
          ota_jobs: [
            {
              ota_job_id: string,
              ota_job_name: string,
              ota_image_id: string,
              completed_count: 0,
              total_count: 0,
              triggered_timestamp: string,
              nodes: [
                node_id
              ],
              status: string
            }
          ],
          total: 0,
          next_id: id of the next record
        }
    GetOTAJob:
      value:
        {
          ota_job_id: string,
          ota_job_name: string,
          ota_image_id: string,
          completed_count: 0,
          total_count: 0,
          triggered_timestamp: string,
          nodes: [
            node_id
          ],
          status: string,
          archived: true
        }

    GetArchivedOTAJobs:
      value:
        {
          ota_jobs: [
            {
              ota_job_id: string,
              ota_job_name: string,
              ota_image_id: string,
              completed_count: 0,
              total_count: 0,
              triggered_timestamp: string,
              nodes: [
                node_id
              ],
              status: string,
              archived: true
            }
          ],
          total: 0,
          next_id: id of the next record
        }

    GetNodeGroupByIdArrayWithNodeDetails:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        node_details: [
          {
            node_id: string,
            name: string,
            fw_version: string,
            type: string,
            model: string
          }
        ],
        total: <nodes_count>,
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
            node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          "sub_groups":null,
          description: description
         }],
         description: description
         }]

    GetNodeGroupByIdWithNodeDetails:
      value:
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        node_details: [
          {
            node_id: string,
            name: string,
            fw_version: string,
            type: string,
            model: string
          }
        ],
        total: <nodes_count>,
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
          "sub_groups":null,
          description: description
         }],
         description: description,
         next_id: string
         }

    GetNodeGroupByIdArrayWithNodeDetailsWithoutSubGroups:
      value:
        groups: [
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        node_details: [
          {
            node_id: string,
            name: string,
            fw_version: string,
            type: string,
            model: string
          }
        ],
        total: <nodes_count>,
        description: description
        }]

    GetNodeGroupByIdWithNodesAndSubgroups:
      value:
        {
        group_name: group_name,
        group_id: group_id,
        type: type_metadata,
        nodes: ["node1","node2"],
        total: <nodes_count>,
         sub_groups: [{
           "group_name": group_name,
          "group_id": group_id,
          "parent_group_id": parent_group_id,
          "type": type_metadata,
          "sub_groups":null,
          description: description
         }],
         description: description,
         next_id: string
         }
    GetNodeGroupByNameWithNodeDetails:
      value:
        [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          node_details: [
            {
              node_id: string,
              name: string,
              fw_version: string,
              type: string,
              model: string
            }
          ],
          total: <nodes_count>,
          sub_groups: [{
            "group_name": group_name,
            "group_id": group_id,
            "parent_group_id": parent_group_id,
            "type": type_metadata,
            "sub_groups":null,
            description: description
          }],
          description: description,
          next_id: string
          }
        ]

    GetNodeGroupByNameWithNodesAndSubgroups:
      value:
        [
          {
          group_name: group_name,
          group_id: group_id,
          type: type_metadata,
          nodes: ["node1","node2"],
          total: <nodes_count>,
          sub_groups: [{
            "group_name": group_name,
            "group_id": group_id,
            "parent_group_id": parent_group_id,
            "type": type_metadata,
            "sub_groups":null,
            description: description
          }],
          description: description,
          next_id: string
          }
        ]

    MultiNodesSetParamsRequestBodyExample:
      value:
        [{
           node_id: string,
           payload: {
             Light: {
               brightness: 100,
               output: true
             },
             Switch: {
               output: true
             }
           }
         },{
           node_id: string,
           payload: {
             Light: {
               brightness: 100,
               output: true
             },
             Switch: {
               output: true
             }
           }
         }]
